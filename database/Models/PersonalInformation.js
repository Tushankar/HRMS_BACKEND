const mongoose = require("mongoose");

// Personal Information Form Schema
const PersonalInformationSchema = new mongoose.Schema(
  {
    applicationId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "OnboardingApplication",
      required: true,
    },
    employeeId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "user",
      required: true,
    },

    // Basic Details
    firstName: { type: String },
    middleName: { type: String },
    lastName: { type: String },
    preferredName: { type: String },
    gender: { 
      type: String,
      enum: ["Male", "Female", "Non-binary", "Prefer not to say", "Custom"]
    },
    customGender: { type: String }, // For custom gender option
    dateOfBirth: { type: Date },
    nationality: { type: String },
    maritalStatus: { 
      type: String,
      enum: ["Single", "Married", "Divorced", "Widowed", "Separated", "Other"]
    },
    socialSecurityNumber: { type: String },
    employeeId: { type: String }, // Auto-generated by HR system
    profilePhoto: { type: String }, // File path/URL

    // Current Address
    currentAddress: {
      streetAddress: { type: String },
      apartment: { type: String },
      city: { type: String },
      state: { type: String },
      zipCode: { type: String }
    },

    // Permanent Address (if different)
    permanentAddress: {
      streetAddress: { type: String },
      city: { type: String },
      state: { type: String },
      zipCode: { type: String }
    },

    // Communication Details
    personalEmail: { type: String },
    workEmail: { type: String }, // Auto-assigned
    personalPhone: { type: String },
    workPhone: { type: String },

    // Emergency Contact
    emergencyContact: {
      name: { type: String },
      relationship: { type: String },
      phone: { type: String },
      email: { type: String }
    },

    // Government ID
    governmentId: {
      type: { 
        type: String,
        enum: ["Driver's License", "Passport", "State ID"]
      },
      number: { type: String },
      expiryDate: { type: Date },
      documentPath: { type: String } // File path for uploaded document
    },

    // Work Authorization
    workAuthorization: {
      status: {
        type: String,
        enum: ["U.S. Citizen", "Green Card", "Visa"]
      },
      visaType: { type: String }, // H1B, L1, F1, etc.
      visaExpiryDate: { type: Date }
    },

    // Internal status tracking
    status: {
      type: String,
      enum: ["draft", "completed", "submitted", "under_review", "approved", "rejected"],
      default: "draft",
    },

    // HR Review and Feedback
    hrFeedback: {
      comment: { type: String },
      reviewedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "user",
      },
      reviewedAt: { type: Date }
    },
  },
  {
    timestamps: true,
  }
);

module.exports = mongoose.model("PersonalInformation", PersonalInformationSchema);